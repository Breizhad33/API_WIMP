{"version":3,"sources":["tutofr(safe).js"],"names":["lat_home","lon_home","macarte","markerClusters","list","city","Array","initCoord","min","max","Math","random","initPoint","point","Lat","Lon","Alt","ville","Object","id","lat","lon","alt","push","initMap","L","map","setView","markerClusterGroup","tileLayer","attribution","minZoom","maxZoom","addTo","home","circle","color","fillColor","fillOpacity","radius","command","control","position","onAdd","div","DomUtil","create","innerHTML","i","length","Routing","waypoints","latLng","router","OSRMv1","profile","serviceUrl","lineOptions","styles","className","draggableWaypoints","addWaypoints","myIcon","icon","iconSize","iconAnchor","popupAnchor","console","log","marker","bindPopup","addLayer","window","onload"],"mappings":"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","file":"tutofr(safe).35f66490.js","sourceRoot":"..","sourcesContent":["// On initialise la latitude et la longitude de l'habitation du client (centre de la carte)\n// Au préalable séléctionné/donné par l'utilisateur, dans le cas contraire:\n// Se positionner sur Paris.\n        var lat_home = 48.73056610085155;\n        var lon_home = -3.460834918664013;\n        var macarte = null;\n        var markerClusters; // Servira à stocker les groupes de marqueurs\n\n        // Nous initialisons un tableau city qui contiendra les \"ville\"\n        //list = nombre d'enregistrement fait par le GPS, sur la BDD, encore accessible\n        var list = 0;\n        let city = new Array(list);\n\n        //fonction donnant un nombre random entre un min et un max\n        function initCoord(min, max){\n          min = min;\n          max = max;\n          return Math.random() * (max - min) + min;\n        }\n\n        // Fonction d'initialisation de points (randoms) sur la carte\n        function initPoint() {\n          for (let point = 0; point < 10; point++){\n\n            // Pour la France et ses alentours:\n            //Lat = initCoord(42, 51);\n            //Lon = initCoord(-4, 8);\n\n            // Pour la Bretagne et ses alentours:\n            // Lat = initCoord(47.97, 48.5);\n            // Lon = initCoord(-4, -1);\n            // Alt = initCoord(-4, 20);\n\n            // // Pour Lannion et ses alentours:\n            // Lat = initCoord(48.7861, 48.7041);\n            // Lon = initCoord(-3.5499, -3.3877);\n            // Alt = initCoord(-4, 20);\n\n            // Pour la vallé du Stanco et ses alentours:\n            Lat = initCoord(48.73565081538279, 48.73746224718652);//48.73746224718652, -3.450671274438872\n            Lon = initCoord(-3.4550969193093337, -3.450671274438872);\n            Alt = initCoord(-4, 20);\n\n            var ville = new Object();\n            ville.id = point;\n            ville.lat = Lat;\n            ville.lon = Lon;\n            ville.alt = Alt;\n            city.push(ville);\n          }\n        }\n        initPoint();\n\n        // Fonction d'initialisation de la carte\n        function initMap() {\n  \t       // Créer l'objet \"macarte\" et l'insèrer dans l'élément HTML qui a l'ID \"map\"\n  \t       macarte = L.map('map').setView([lat_home, lon_home], 11);\n           markerClusters = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs\n  \t       // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr\n           L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {\n\t\t           // Source des données\n\t\t           attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',\n\t\t           minZoom: 1,\n\t\t           maxZoom: 20\n  \t       }).addTo(macarte);\n\n           //Création du périmêtre de la maison, autour du quel, la position du chien n'est pas pris en compte\n           var home = L.circle([48.732675, -3.446217], {\n             color: 'red',\n             fillColor: '#f03',\n             fillOpacity: 0.5,\n             //Radius = Rayon \"Maison\"\n             radius: 500\n          }).addTo(macarte);\n\n          //Création du boutton \"afficher Menu\"\n          //     /!\\ PAS FINI /!\\\n          var command = L.control({position: 'topright'});\n          command.onAdd = function (macarte) {\n            var div = L.DomUtil.create('div', 'command');\n            div.innerHTML += '<button><img href=\"images/icon_plus.png\" width=\"100px\" /></button>';\n            return div;\n          };\n          command.addTo(macarte);\n\n\n          for (var i = 0; i < city.length-1; i++) {\n          //Création du tracé GPS\n            L.Routing.control({\n              waypoints:[\n                //L.latLng(48.56036426785153, -3.1599197957359926),\n                L.latLng(city[i].lat, city[i].lon),\n                //L.latLng(48.51278434587372, -2.779401099923159)],\n                L.latLng(city[i+1].lat, city[i+1].lon)],\n                 router: new L.Routing.OSRMv1({\n                   profile: 'route/v1/driving',         // /!\\ IMPORTANT /!\\ : Suffixe de serviceUrl\n                   serviceUrl: 'http://192.168.15.87:5000'  // Permet  http://localhost:5000\n                 }),\n              // Class \"animate\" permet de régler (en CSS) certain détail de l'animation (vitesse d'exécution, temps avant exécution, coleur, etc...)\n              lineOptions: {\n                styles: [{className: 'animate'}]\n              },\n              draggableWaypoints: false,\n              addWaypoints: false\n            }).addTo(macarte);\n          }\n\n           //test pour ajout dans tableau city\n           for (ville in city) {\n             // Nous définissons l'icône à utiliser pour le marqueur, sa taille affichée (iconSize), sa position (iconAnchor) et le décalage de son ancrage (popupAnchor)\n             var myIcon = L.icon({\n             iconSize: [50, 50],\n             iconAnchor: [25, 50],\n             popupAnchor: [-3, -76],\n             });\n             console.log(city[ville].lat);\n             console.log(city[ville].lon);\n             console.log(city[ville].alt);\n\n             // var LeafIcon = L.Icon.extend({\n             //      options: {\n             //         iconSize:     [38, 95],\n             //         shadowSize:   [50, 64],\n             //         iconAnchor:   [22, 94],\n             //         shadowAnchor: [4, 62],\n             //         popupAnchor:  [-3, -76]\n             //      }\n             //  });\n             //  var greenIcon = new LeafIcon({\n             //      iconUrl: 'http://leafletjs.com/examples/custom-icons/leaf-green.png',\n             //      shadowUrl: 'http://leafletjs.com/examples/custom-icons/leaf-shadow.png'\n             //  });\n\n\n             var marker = L.marker([city[ville].lat, city[ville].lon, city[ville].alt]).addTo(macarte);//.bindPopup(`<b> ${ville} <b><br>Lattitude: ${city[ville].lat} <br>Longitude: ${city[ville].lon} <br>Altitude: ${city[ville].alt} MAMSL`);\n             // Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML\n             marker.bindPopup(`<b> ${ville} <b><br>Lattitude: ${city[ville].lat} <br>Longitude: ${city[ville].lon} <br>Altitude: ${city[ville].alt} MAMSL`);\n          }\n           macarte.addLayer(markerClusters);\n           // Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML\n           home.bindPopup(\"Maison\")\n        }\n        window.onload = function(){\n\t\t    // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé\n\t\t    initMap();\n      };\n"]}